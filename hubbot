#! /usr/bin/python

import subprocess
import json
import os
import sys
import errno
import shutil
import traceback
import glob
import ast
import pprint

keep_work_dirs = 10
work = "%s/hubbot/" % os.environ['HOME']
work_url = "http://files.cockpit-project.org/hubbot"

user_whitelist = [ 'stefwalter', 'andreasn', 'mvollmer', 'petervo', 'dperpeet' ]

config = ast.literal_eval(open("%s/.hubbotrc" % os.environ['HOME']).read())

github_token = config['github_token']

def mk_exclusive_dir(path):
    try:
        os.mkdir(path)
        return True
    except OSError as e:
        if e.errno == errno.EEXIST:
            return False
        else:
            raise e

class WorkDir(object):
    def __init__(self, name):
        i = 0
        n = name
        while not mk_exclusive_dir (os.path.join (work, n)):
            i = i + 1
            n = name + "." + str(i)
        self.path = os.path.join (work, n)
        if work_url:
            self.url = os.path.join (work_url, n)

    def __enter__(self):
        print "Entering %s" % self.path
        self.oldcwd = os.getcwd()
        os.chdir(self.path)
        self.log = open("hubbot.log", 'w', 1)
        self.tail = subprocess.Popen([ "tail", "-f", "hubbot.log" ])
        self.old_stdout, self.old_stderr = sys.stdout, sys.stderr
        self.old_stdout.flush(); self.old_stderr.flush()
        sys.stdout = self.log
        sys.stderr = self.log
        return self

    def __exit__(self, exc_type, exc_value, traceback):
        self.log.flush()
        self.tail.kill()
        self.tail.wait()
        sys.stdout = self.old_stdout
        sys.stderr = self.old_stderr
        print "Leaving %s" % self.path

def expire_work_dirs():
    dirs = sorted (map (lambda e: (os.stat(e).st_mtime,e),
                        map (lambda e: os.path.join(work,e),
                             filter (lambda e: e != "data",
                                     os.listdir(work)))),
                   lambda x,y: cmp(x[0],y[0]))
    if len(dirs) > keep_work_dirs:
        for d in dirs[0:len(dirs)-keep_work_dirs]:
            print "Expiring %s" % d[1]
            shutil.rmtree(d[1])

def cmd(*args):
    print "+", " ".join(list(args))
    subprocess.check_call(list(args), stdout=sys.stdout, stderr=sys.stderr)

def cmd_output(*args):
    return subprocess.check_output(list(args))

def git(*args):
    cmd("git", *args)

def git_output(*args):
    return cmd_output("git", *args)

# def upload_logs(sha):
#     loc = "%s/%s" % (logdest_subdir, sha)
#     cmd("ssh", logdest_server, "mkdir", "-p", "%s/%s" % (logdest_server_dir, loc))
#     args = ([ "scp", "hubbot.log" ]
#             + glob.glob("test/mock/*.log")
#             + glob.glob("test/*.png")
#             + [ "%s:%s/%s/" % (logdest_server, logdest_server_dir, loc) ]);
#     cmd(*args)
#     return "%s/%s/" % (logdest_http, loc)

def github_get(url):
    return json.loads(subprocess.check_output ([ "curl", "-s",
                                                 "-u", "%s:x-oauth-basic" % github_token,
                                                 "https://api.github.com/repos/%s/%s" % (master_repo, url),
]))

def add_github_comment(issue, message):
    subprocess.check_call ([ "curl", "-s",
                             "-u", "%s:x-oauth-basic" % github_token,
                             "https://api.github.com/repos/%s/issues/%s/comments" % (master_repo, issue),
                             "-d", json.dumps({"body": message})
                           ])

def set_github_status(repo, sha, status):
    subprocess.check_call ([ "curl", "-s",
                             "-u", "%s:x-oauth-basic" % github_token,
                             "https://api.github.com/repos/%s/statuses/%s" % (repo, sha),
                             "-d", json.dumps(status)
                           ])

def add_comment(issue, message):
    if issue:
        add_github_comment(issue, message)
    else:
        print "+++ %s" % message

def verify(head):
    pull_repo = head['repo']['full_name']
    ref = head['ref']
    sha = head['sha']
    context = "hubbot/f21/x86-64"
    with WorkDir(sha) as wd:
        try:
            set_github_status(master_repo, sha, { "state": "pending",
                                                  "description": "Hubbot is busy",
                                                  "target_url": wd.url,
                                                  "context": context })
            git("init")
            git("fetch", "https://github.com/%s.git" % pull_repo, ref)
            branch = git_output("rev-parse", "FETCH_HEAD").strip()
            git("checkout", "FETCH_HEAD")
            git("fetch", "https://github.com/%s.git" % master_repo, "master")
            master = git_output("rev-parse", "FETCH_HEAD").strip()
            git("rebase", "FETCH_HEAD")
            os.putenv("TEST_OS", "fedora-21")
            os.putenv("TEST_ARCH", "x86_64")
            os.putenv("TEST_DATA", "%s/cockpit-data/" % os.environ['HOME'])
            os.putenv("TEST_JOBS", "4")
            cmd("./VERIFY")
            set_github_status(master_repo, sha, { "state": "success",
                                                  "description": "Hubbot is happy",
                                                  "target_url": wd.url,
                                                  "context": context })
        except:
            traceback.print_exc()
            set_github_status(master_repo, sha, { "state": "failure",
                                                  "description": "Hubbot is sad",
                                                  "target_url": wd.url,
                                                  "context": context })

def needs_verify(head):
    # XXX - check whether master has changed since last verify
    status = github_get("commits/%s/status" % p['head']['sha'])
    for s in status['statuses']:
        if s['context'] == 'hubbot/f21/x86-64':
            print "%s already verified" % p['head']['label']
            return False
    print "%s needs verification" % p['head']['label']
    return True

if len(sys.argv) == 3:
    master_repo = sys.argv[1]
    pull = sys.argv[2]
elif len(sys.argv) == 2:
    master_repo = "cockpit-project"
    pull = sys.argv[1]
else:
    print "Usage: hubbot [MASTER-REPO] PULL"
    print "       hubbot [MASTER-REPO] -"
    exit(1)

expire_work_dirs()

if not "/" in master_repo:
    master_repo = master_repo + "/cockpit"

if pull == "-":
    pulls = github_get("pulls")
    for p in pulls:
        if p['head']['user']['login'] not in user_whitelist:
            print "%s not in whitelist" % p['head']['user']['login']
            continue
        if needs_verify(p['head']):
            data = p
            break
else:
    data = github_get("pulls/%s" % pull)

verify (data['head'])
