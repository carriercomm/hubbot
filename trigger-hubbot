#! /usr/bin/python

import subprocess
import json
import os
import sys
import ast

config = ast.literal_eval(open("%s/.hubbotrc" % os.environ['HOME']).read())

github_token = config['github_token']
user_whitelist = config['user_whitelist']

new_style = False
github_status_context = "hubbot/f22/x86-64"

def trace(msg):
    print msg

def github_get(url):
    return json.loads(subprocess.check_output ([ "curl", "-s",
                                                 "-u", "%s:x-oauth-basic" % github_token,
                                                 "https://api.github.com/repos/%s/%s" % (master_repo, url),
]))

def set_github_status(repo, sha, status):
    subprocess.check_output ([ "curl", "-s",
                               "-u", "%s:x-oauth-basic" % github_token,
                               "https://api.github.com/repos/%s/statuses/%s" % (repo, sha),
                               "-d", json.dumps(status)
                           ])

def trigger_pull(pull):
    data = github_get("pulls/%s" % pull)
    sha = data['head']['sha']
    set_github_status(master_repo, sha, { "state": "pending" if not new_style else "success",
                                          "description": "Hubbot will get to this eventually",
                                          "context": github_status_context })

def consider_head(head):
    status = github_get("commits/%s/status" % head['sha'])
    for s in status['statuses']:
        if s['context'] == github_status_context:
            if s['state'] == 'failure':
                return True
    return False

def scan_pulls():
    pulls = github_get("pulls")
    master = github_get('branches/master')['commit']['sha']
    for p in pulls:
        if p['head']['user']['login'] not in user_whitelist:
            trace("%s not in whitelist" % p['head']['user']['login'])
            continue
        if consider_head(p['head']):
            trigger_pull(str(p['number']))

if "HUBBOT_NEW_STYLE" in os.environ and os.environ["HUBBOT_NEW_STYLE"]:
    new_style = True
    github_status_context = "hubbot/f21/x86_64/new"

if len(sys.argv) == 3:
    master_repo = sys.argv[1]
    pull = sys.argv[2]
elif len(sys.argv) == 2:
    master_repo = "cockpit-project"
    pull = sys.argv[1]
else:
    print "Usage: trigger-hubbot [MASTER-REPO] PULL"
    exit(1)

if not "/" in master_repo:
    master_repo = master_repo + "/cockpit"

if pull == "failed":
    scan_pulls()
else:
    trigger_pull(pull)
